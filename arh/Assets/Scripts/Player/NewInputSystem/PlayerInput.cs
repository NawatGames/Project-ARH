//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.1
//     from Assets/Scripts/Player/NewInputSystem/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""AstronautGameplay"",
            ""id"": ""14395577-e393-4c56-b2be-bb02e1f18156"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""a46db9cd-17c0-40b7-9c7f-c70121d68f39"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""529e68a0-d94a-44a7-9404-22d829411fd6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""728fa2e0-8346-41b5-bb28-1ae3b9d210f0"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""0426ebd6-644e-44f2-b8cf-f892abc16e52"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8d87cabb-db13-4c12-bb4c-8929a0e65414"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""e77c2240-1cfe-441f-8ffe-d51c938246ce"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""AlienGameplay"",
            ""id"": ""10f998f0-7e6a-4f61-8cc6-536a1357cbd5"",
            ""actions"": [
                {
                    ""name"": ""Walk"",
                    ""type"": ""Value"",
                    ""id"": ""4f784573-7926-45a4-b2fd-14bd76f26b2b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""NormalizeVector2"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4cff9f67-1160-4289-b9b5-b9eb8b91fdb8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""02499638-bda1-41c4-909f-b8a2a1695507"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a05ac97-862c-4099-841d-9e8afe317e08"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""9cbe3226-0074-48c1-88d5-0c47e781212e"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Walk"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b9361833-ec52-40a5-8513-d80fb1e59b58"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // AstronautGameplay
        m_AstronautGameplay = asset.FindActionMap("AstronautGameplay", throwIfNotFound: true);
        m_AstronautGameplay_Walk = m_AstronautGameplay.FindAction("Walk", throwIfNotFound: true);
        m_AstronautGameplay_Jump = m_AstronautGameplay.FindAction("Jump", throwIfNotFound: true);
        // AlienGameplay
        m_AlienGameplay = asset.FindActionMap("AlienGameplay", throwIfNotFound: true);
        m_AlienGameplay_Walk = m_AlienGameplay.FindAction("Walk", throwIfNotFound: true);
        m_AlienGameplay_Jump = m_AlienGameplay.FindAction("Jump", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // AstronautGameplay
    private readonly InputActionMap m_AstronautGameplay;
    private List<IAstronautGameplayActions> m_AstronautGameplayActionsCallbackInterfaces = new List<IAstronautGameplayActions>();
    private readonly InputAction m_AstronautGameplay_Walk;
    private readonly InputAction m_AstronautGameplay_Jump;
    public struct AstronautGameplayActions
    {
        private @PlayerInput m_Wrapper;
        public AstronautGameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_AstronautGameplay_Walk;
        public InputAction @Jump => m_Wrapper.m_AstronautGameplay_Jump;
        public InputActionMap Get() { return m_Wrapper.m_AstronautGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AstronautGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IAstronautGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_AstronautGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AstronautGameplayActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IAstronautGameplayActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IAstronautGameplayActions instance)
        {
            if (m_Wrapper.m_AstronautGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAstronautGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_AstronautGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AstronautGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AstronautGameplayActions @AstronautGameplay => new AstronautGameplayActions(this);

    // AlienGameplay
    private readonly InputActionMap m_AlienGameplay;
    private List<IAlienGameplayActions> m_AlienGameplayActionsCallbackInterfaces = new List<IAlienGameplayActions>();
    private readonly InputAction m_AlienGameplay_Walk;
    private readonly InputAction m_AlienGameplay_Jump;
    public struct AlienGameplayActions
    {
        private @PlayerInput m_Wrapper;
        public AlienGameplayActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Walk => m_Wrapper.m_AlienGameplay_Walk;
        public InputAction @Jump => m_Wrapper.m_AlienGameplay_Jump;
        public InputActionMap Get() { return m_Wrapper.m_AlienGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AlienGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IAlienGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_AlienGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AlienGameplayActionsCallbackInterfaces.Add(instance);
            @Walk.started += instance.OnWalk;
            @Walk.performed += instance.OnWalk;
            @Walk.canceled += instance.OnWalk;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
        }

        private void UnregisterCallbacks(IAlienGameplayActions instance)
        {
            @Walk.started -= instance.OnWalk;
            @Walk.performed -= instance.OnWalk;
            @Walk.canceled -= instance.OnWalk;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
        }

        public void RemoveCallbacks(IAlienGameplayActions instance)
        {
            if (m_Wrapper.m_AlienGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAlienGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_AlienGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AlienGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AlienGameplayActions @AlienGameplay => new AlienGameplayActions(this);
    public interface IAstronautGameplayActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IAlienGameplayActions
    {
        void OnWalk(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
}
